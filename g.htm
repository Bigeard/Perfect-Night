<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width">
    <meta http-equiv="ScreenOrientation" content="autoRotate:disabled">
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title>Perfect Night - Mobile Gamepad</title>
    <link rel="shortcut icon" href="/favicon.ico">
    <script src="js/peerjs.min.js"></script>
    <script src="js/nipplejs.min.js"></script>
    <style>
        body {
            margin: 0px;
            width: 100%;
            height: 100%;
            display: block;
        }

        #peerjs {
            display: block;
            background: #CDCDCD;
            padding: 15px;
            border-radius: 10px;
            border: double 3px #000;
            width: 80%;
            height: 60%;
            margin: auto;
            justify-content: space-around;
        }

        .message-container {
            width: 100%;
        }

        .info-container {
            width: 100%;
        }

        #joystickLeft {
            position: absolute;
            width: 100%;
            height: 100%;
        }

        #joystickRight {
            position: absolute;
            width: 100%;
            height: 100%;
        }
    </style>
</head>

<body>
    <div id="peerjs">
        <div class="message-container">
            <span>Messages: <span id="message"></span></span>
            <input type="text" id="sendMessageBox" placeholder="Enter a message..." />
        </div>
        <div class="info-container">
            <span>Status: <span id="status"></span></span><br>
            <span id="peerId">ID: ...</span>
        </div>
    </div>
    <div>
        <div id="joystickLeft"></div>
        <div id="joystickRight"></div>
    </div>

    <script type="text/javascript">
        // NippleJS
        var joystickLeft = nipplejs.create({
            zone: document.getElementById('joystickLeft'),
            mode: 'static',
            position: { left: '25%', top: '30%' },
            color: 'purple'
        });

        var joystickRight = nipplejs.create({
            zone: document.getElementById('joystickRight'),
            mode: 'static',
            position: { right: '25%', top: '30%' },
            color: 'purple'
        });

        // PeerJS
        (() => {
            var lastPeerId = null;
            var peer = null;
            var conn = null;
            var status = document.getElementById("status");
            var message = document.getElementById("message");
            var sendMessageBox = document.getElementById("sendMessageBox");

            var peerId = document.getElementById("peerId");

            const init = () => {
                status.innerText = "No Connection";
                peer = new Peer(null, { debug: 2 });

                peer.on('open', (id) => {
                    if (peer.id === null) {
                        console.log('Received null id from peer open');
                        peer.id = lastPeerId;
                    } else {
                        lastPeerId = peer.id;
                    }
                    // ICI
                    peerId.innerText = "ID: " + peer.id;
                    const params = new URLSearchParams(document.location.search);
                    const conn_id = params.get("i");
                    if (conn_id) {
                        join(conn_id);
                    } else {
                        console.error("No ID", id);
                    }
                });

                // ICI
                peer.on('connection', (c) => {
                    c.on('open', () => {
                        c.send("Sender does not accept incoming connections");
                        setTimeout(() => c.close(), 500);
                    });
                });

                peer.on('disconnected', () => {
                    status.innerText = "Connection lost. Please reconnect";
                    peer.id = lastPeerId;
                    peer._lastServerId = lastPeerId;
                    peer.reconnect();
                });

                peer.on('close', () => {
                    conn = null;
                    status.innerText = "Connection destroyed. Please refresh";
                });

                peer.on('error', (err) => {
                    console.error(err);
                    alert('' + err);
                });
            };

            const join = (conn_id) => {
                if (conn) {
                    conn.close();
                }
                conn = peer.connect(conn_id, {
                    reliable: true
                });
                conn.on('open', () => {
                    status.innerText = "Connected to: " + conn.peer;
                });
                conn.on('data', (data) => {
                    addMessage("<span class=\"peerMsg\">Peer:</span> " + data);
                });
                conn.on('close', () => {
                    status.innerText = "Connection closed";
                });
            };

            const signal = (sigName) => {
                if (conn && conn.open) {
                    conn.send(sigName);
                    addMessage(sigName + " signal sent");
                } else {
                    console.log('Connection is closed');
                }
            }

            const addMessage = (msg) => {
                var now = new Date();
                var h = now.getHours();
                const addZero = (t) => {
                    if (t < 10) t = "0" + t;
                    return t;
                };
                var m = addZero(now.getMinutes());
                var s = addZero(now.getSeconds());
                if (h > 12) h -= 12;
                else if (h === 0) h = 12;

                message.innerHTML = "<br><span class=\"msg-time\">" + h + ":" + m + ":" + s + "</span>  -  " + msg + message.innerHTML;
            };

            // Send Message
            sendMessageBox.addEventListener('keypress', (e) => {
                if (e.keyCode == '13') {
                    if (conn && conn.open) {
                        var msg = sendMessageBox.value;
                        sendMessageBox.value = "";
                        conn.send(msg);
                        addMessage("<span class=\"selfMsg\">Self: </span> " + msg);
                    } else {
                        console.log('Connection is closed');
                    }
                }
            });

            joystickLeft.on('start end', function (evt, data) {
                // console.log('start end', data);
                if (conn) {
                    conn.send({
                        j: "l",
                        x: 0,
                        y: 0,
                    });
                }

            }).on('move', function (evt, data) {
                if (conn) {
                    conn.send({
                        j: "l",
                        x: (Math.round(data.instance.frontPosition.x) / 50),
                        y: (Math.round(data.instance.frontPosition.y) / 50)
                    })
                }
            }).on('pressure', function (evt, data) {
                // console.log('pressure', data);
            });

            joystickRight.on('start end', function (evt, data) {
                // console.log('start end', data);
                if (conn) {
                    conn.send({
                        j: "r",
                        x: 0,
                        y: 0,
                    });
                }
            }).on('move', function (evt, data) {
                if (conn) {
                    conn.send({
                        j: "r",
                        x: (Math.round(data.instance.frontPosition.x) / 50),
                        y: (Math.round(data.instance.frontPosition.y) / 50)
                    })
                }
            }).on('pressure', function (evt, data) {
                // console.log('pressure', data);
            });

            init();
        })();
    </script>
</body>

</html>