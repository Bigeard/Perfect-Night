<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, user-scalable=no">
    <!-- <meta http-equiv="ScreenOrientation" content="autoRotate:disabled"> -->
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title>Perfect Night - Mobile Gamepad</title>
    <link rel="shortcut icon" href="/favicon.ico">

    <!-- <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black"> -->

    <script src="js/peerjs.min.js"></script>
    <script src="js/nipplejs.min.js"></script>
    <style>
        html {
            font-family: Arial, Helvetica, sans-serif;
            font-weight: bold;
            color: white;
            margin: 0;
            padding: 0;
            -webkit-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
        }

        body {
            margin: 0px;
            padding: 0;
            width: 100%;
            height: 100vh;
            display: block;
            /* background: #CDCDCD; */
        }

        #peerjs {
            display: block;
            background: #aaa;
            padding: 15px;
            border-radius: 15px;
            /* border: double 3px #000; */
            width: auto;
            /* height: 60%; */
            margin: 15px auto 0 auto;
            justify-content: space-around;
        }

        .message-container {
            display: none;
            width: 100%;
        }

        .info-container {
            width: 100%;
        }

        #joysticks {
            width: 100%;
            background: white;
            border-radius: 15px;
        }

        #joystickLeft {
            position: absolute;
            left: 0;
            bottom: -50;
            width: 50%;
            height: 100vh;
            border-right: dashed #ddd 1px;
        }

        #joystickRight {
            position: absolute;
            right: 0;
            bottom: -40;
            width: 50%;
            height: 100vh;
            border-left: dashed #ddd 1px;
        }

        /* .infoTop {
            text-align: center;
        } */

        #infoBottom {
            position: absolute;
            left: 0;
            right: 0;
            padding: 10px;
            margin: auto;
            background: #aaa;
            width: fit-content;
            border-radius: 0px 0px 15px 15px;
        }
    </style>
</head>

<body id="body">
    <div id="peerjs">
        <!-- <div class="message-container">
            <span>Messages: <span id="message"></span></span><br>
            <input type="text" id="sendMessageBox" placeholder="Enter a message..." />
        </div> -->
        <div class="info-container">
            <span>Status: <span id="status"></span></span><br>
            <span id="peerId">ID: ...</span><br>
            <span id="ping">Ping: X</span>
        </div>
    </div>
    <div id="joysticks">
        <div id="joystickLeft"></div>
        <div id="joystickRight"></div>
    </div>
    <!-- <div class="infoTop">
        <span>Life X</span>
        <span>Ammo. X</span>
    </div> -->
    <div id="infoBottom">
        <span id="playerId">PLAYER X</span>
    </div>

    <script type="text/javascript">
        // document.addEventListener('touchmove', function (event) {
        //     if (event.scale !== 1) { event.preventDefault(); }
        // }, { passive: false });

        // NippleJS
        var joystickLeft = nipplejs.create({
            zone: document.getElementById('joystickLeft'),
            mode: 'static',
            position: { left: '50%', top: '50%' },
            color: 'grey',
            size: 150
        });

        var joystickRight = nipplejs.create({
            zone: document.getElementById('joystickRight'),
            mode: 'static',
            position: { right: '50%', top: '50%' },
            color: 'grey',
            size: 150
        });

        // PeerJS
        (() => {
            var lastPeerId = null;
            var peer = null;
            var conn = null;
            var status = document.getElementById("status");
            var message = document.getElementById("message");
            var sendMessageBox = document.getElementById("sendMessageBox");
            var ping = document.getElementById("ping");
            var peerjs = document.getElementById("peerjs");
            var infoBottom = document.getElementById("infoBottom");
            var playerId = document.getElementById("playerId");

            var peerId = document.getElementById("peerId");

            const init = () => {
                status.innerText = "No connection";
                peer = new Peer(null, { debug: 2 });

                peer.on('open', (id) => {
                    if (peer.id === null) {
                        console.log('Received null id from peer open');
                        peer.id = lastPeerId;
                    } else {
                        lastPeerId = peer.id;
                    }
                    peerId.innerText = "ID: " + peer.id;
                    const params = new URLSearchParams(document.location.search);
                    const conn_id = params.get("i");
                    if (conn_id) {
                        join(conn_id);
                    } else {
                        console.error("No ID", id);
                    }
                });

                peer.on('connection', (c) => {
                    c.on('open', () => {
                        c.send("Sender does not accept incoming connections");
                        setTimeout(() => c.close(), 500);
                    });
                });

                peer.on('disconnected', () => {
                    status.innerText = "Connection lost. Please reconnect";
                    peer.id = lastPeerId;
                    peer._lastServerId = lastPeerId;
                    peer.reconnect();
                });

                peer.on('close', () => {
                    conn = null;
                    status.innerText = "Connection destroyed. Please refresh";
                });

                peer.on('error', (err) => {
                    console.error(err);
                    alert('' + err);
                });
            };

            const join = (conn_id) => {
                if (conn) {
                    conn.close();
                }
                conn = peer.connect(conn_id, {
                    reliable: true
                });
                conn.on('open', () => {
                    status.innerText = "Connected to " + conn.peer;
                });
                conn.on('data', (data) => {
                    if (data != null && (typeof data === 'object' || typeof data === 'function')) {
                        if (data.color != null) {
                            joystickLeft[0].options.color = data.color;
                            joystickLeft[0].ui.front.style.background = data.color;
                            joystickLeft[0].ui.back.style.background = data.color;

                            joystickRight[0].options.color = data.color;
                            joystickRight[0].ui.front.style.background = data.color;
                            joystickRight[0].ui.back.style.background = data.color;

                            peerjs.style.background = data.color;
                            infoBottom.style.background = data.color;
                        }
                        if (data.index != null) {
                            playerId.innerText = "PLAYER " + data.index;
                        }
                        ping.innerText = "Ping: " + (new Date().getTime() - data.t);
                    }
                    else {
                        addMessage("<span class=\"peerMsg\">Peer:</span> " + data);
                    }
                });
                conn.on('close', () => {
                    status.innerText = "Connection closed";
                });
            };

            const signal = (sigName) => {
                if (conn && conn.open) {
                    conn.send(sigName);
                    addMessage(sigName + " signal sent");
                } else {
                    console.log('Connection is closed');
                }
            }

            const addMessage = (msg) => {
                var now = new Date();
                var h = now.getHours();
                const addZero = (t) => {
                    if (t < 10) t = "0" + t;
                    return t;
                };
                var m = addZero(now.getMinutes());
                var s = addZero(now.getSeconds());
                if (h > 12) h -= 12;
                else if (h === 0) h = 12;

                message.innerHTML = "<br><span class=\"msg-time\">" + h + ":" + m + ":" + s + "</span>  -  " + msg + message.innerHTML;
            };

            // Send Message
            if (sendMessageBox) {
                sendMessageBox.addEventListener('keypress', (e) => {
                    if (e.keyCode == '13') {
                        if (conn && conn.open) {
                            var msg = sendMessageBox.value;
                            sendMessageBox.value = "";
                            conn.send(msg);
                            addMessage("<span class=\"selfMsg\">Self: </span> " + msg);
                        } else {
                            console.log('Connection is closed');
                        }
                    }
                });
            }


            joystickLeft.on('start end', function (evt, data) {
                if (conn) {
                    conn.send({
                    // ICI
                        t: new Date().getTime(), // Time
                        j: "l", // Joystick Left / Right
                        x: 0, // Position Joystick X
                        y: 0, // Position Joystick Y
                    });
                }

            }).on('move', function (evt, data) {
                if (conn) {
                    conn.send({
                        t: new Date().getTime(), // Time
                        j: "l",
                        x: (Math.round(data.instance.frontPosition.x) / 50),
                        y: (Math.round(data.instance.frontPosition.y) / 50)
                    })
                }
            }).on('pressure', function (evt, data) {
                // console.log('pressure', data);
            });

            joystickRight.on('start end', function (evt, data) {
                if (conn) {
                    conn.send({
                        t: new Date().getTime(), // Time
                        j: "r", // Joystick Left / Right
                        x: 0, // Position Joystick X
                        y: 0, // Position Joystick Y
                    });
                }
            }).on('move', function (evt, data) {
                if (conn) {
                    conn.send({
                        t: new Date().getTime(), // Time
                        j: "r",
                        x: (Math.round(data.instance.frontPosition.x) / 50),
                        y: (Math.round(data.instance.frontPosition.y) / 50)
                    })
                }
            }).on('pressure', function (evt, data) {
                // console.log('pressure', data);
            });

            init();
        })();
    </script>
</body>

</html>